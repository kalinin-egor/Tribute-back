// @title           Tribute Backend API
// @version         1.0
// @description     This is the backend API for the Tribute application, which integrates with Telegram for user interaction and authentication. It uses Telegram's `initData` for secure, stateless authentication.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    https://github.com/user/Tribute-back/issues
// @contact.email  support@tribute.app

// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT

// @host      localhost:8080
// @BasePath  /api/v1
// @schemes   http

// @securityDefinitions.apikey  TgAuth
// @in                          header
// @name                        Authorization
// @description                 **Authentication for Telegram Web Apps.** \
// @description                 Enter your token in the format: `TgAuth <initData>`. \
// @description                 The `<initData>` string is provided by the Telegram client when the web app is opened.

package main

import (
	"log"

	"tribute-back/internal/config"
	"tribute-back/internal/database"
	"tribute-back/internal/redis"
	"tribute-back/internal/server"

	_ "tribute-back/docs" // This is generated by swag
)

// @Summary     Health check
// @Description Get the health status of the API
// @Tags        health
// @Accept      json
// @Produce     json
// @Success     200 {object} map[string]interface{}
// @Router      /health [get]
func main() {
	// Load environment variables
	if err := config.LoadEnv(); err != nil {
		log.Fatal("Error loading environment variables:", err)
	}

	// Initialize database
	db, err := database.Init()
	if err != nil {
		log.Fatal("Error initializing database:", err)
	}
	defer db.Close()

	// Reset database on startup (drops all tables and recreates them)
	if err := database.ResetDatabase(); err != nil {
		log.Fatal("Error resetting database:", err)
	}

	// Initialize Redis
	redisClient, err := redis.Init()
	if err != nil {
		log.Println("Could not connect to Redis:", err)
	} else {
		defer redisClient.Close()
	}

	// Create and run server
	app := server.NewServer(db, redisClient)
	addr := ":" + config.GetEnv("PORT", "8081")
	log.Printf("Server starting on %s", addr)
	if err := app.Run(addr); err != nil {
		log.Fatal("Error starting server:", err)
	}
}

// @title           Tribute Backend API
// @version         1.0
// @description     A clean, well-structured Golang REST API backend built with Gin framework, PostgreSQL database, Redis caching, and JWT authentication.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT

// @host      localhost:8081
// @BasePath  /api/v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

package main

import (
	"log"
	"os"

	"tribute-back/internal/config"
	"tribute-back/internal/database"
	"tribute-back/internal/redis"
	"tribute-back/internal/server"

	_ "tribute-back/docs" // This is generated by swag
)

// @Summary     Health check
// @Description Get the health status of the API
// @Tags        health
// @Accept      json
// @Produce     json
// @Success     200 {object} map[string]interface{}
// @Router      /health [get]
func main() {
	// Load environment variables
	if err := config.LoadEnv(); err != nil {
		log.Fatal("Error loading environment variables:", err)
	}

	// Initialize database
	db, err := database.Init()
	if err != nil {
		log.Fatal("Error initializing database:", err)
	}
	defer db.Close()

	// Initialize Redis
	redisClient, err := redis.Init()
	if err != nil {
		log.Fatal("Error initializing Redis:", err)
	}
	defer redisClient.Close()

	// Initialize and start server
	app := server.NewServer(db, redisClient)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8081"
	}

	log.Printf("Server starting on port %s", port)
	if err := app.Run(":" + port); err != nil {
		log.Fatal("Error starting server:", err)
	}
}

name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install dependencies
      run: go mod download
      
    - name: Run tests
      run: go test ./...
      
    - name: Deploy to VPS
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        debug: true
        script: |
          set -e
          echo "🔐 SSH Authentication successful!"
          echo "Starting deployment process..."
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          
          # Set repository path
          REPO_PATH="/root/tribute/Tribute-back"
          echo "Using repository path: $REPO_PATH"
          
          # Navigate to repository directory
          if [ -d "$REPO_PATH" ]; then
            cd "$REPO_PATH"
            echo "Repository directory: $(pwd)"
          else
            echo "❌ Repository directory not found: $REPO_PATH"
            echo "Available directories in /root/:"
            ls -la /root/
            echo "Creating repository directory..."
            mkdir -p "$REPO_PATH"
            cd "$REPO_PATH"
          fi
          
          # Setup Git with HTTPS (more reliable than SSH for CI/CD)
          echo "📥 Setting up Git repository with HTTPS..."
          if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository_owner }}/Tribute-back.git .
          fi
          
          # Configure Git for HTTPS
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/${{ env.BRANCH_NAME }}
          
          # Setup Docker Compose
          echo "🐳 Setting up Docker Compose..."
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found in repository"
            exit 1
          fi
          
          # Stop existing containers if running
          echo "🛑 Stopping existing containers..."
          docker-compose down || true
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          docker-compose up -d --build
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 10
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          
          # Check migration status first
          echo "📊 Checking current migration status..."
          MIGRATION_STATUS=$(docker-compose exec -T migrate migrate -path /migrations -database "postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable" version 2>&1 || echo "ERROR")
          
          if [[ "$MIGRATION_STATUS" == *"dirty"* ]]; then
            echo "⚠️ Database is in dirty state. Attempting to fix..."
            # Extract version number from dirty status
            DIRTY_VERSION=$(echo "$MIGRATION_STATUS" | grep -o '[0-9]\+' | head -1)
            echo "🔧 Forcing migration version to $DIRTY_VERSION..."
            docker-compose exec -T migrate migrate -path /migrations -database "postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable" force $DIRTY_VERSION
            echo "✅ Dirty state fixed. Now running migrations..."
          fi
          
          # Run migrations
          docker-compose exec -T migrate migrate -path /migrations -database "postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable" up || {
            echo "❌ Migration failed, trying alternative approach..."
            # Alternative: run migrations directly in postgres container
            docker-compose exec -T postgres psql -U postgres -d tribute_db -c "SELECT version();" || {
              echo "❌ Cannot connect to database, waiting longer..."
              sleep 15
            }
            # Try migrations again
            docker-compose exec -T migrate migrate -path /migrations -database "postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable" up
          }
          
          echo "✅ Database migrations completed successfully!"
          
          # Check container status
          echo "📊 Container status:"
          docker-compose ps
          
          # Check logs
          echo "📋 Recent logs:"
          docker-compose logs --tail=20
          
          # Create systemd service for the binary (as backup)
          if [ ! -f "/etc/systemd/system/tribute-back.service" ]; then
            echo "🔧 Creating systemd service..."
            cat > /etc/systemd/system/tribute-back.service << 'EOF'
          [Unit]
          Description=Tribute Backend Service
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=$REPO_PATH
          ExecStart=$REPO_PATH/tribute-back
          Restart=always
          RestartSec=5
          Environment=GIN_MODE=release
          
          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable tribute-back.service
          fi
          
          echo "🎉 Deployment completed successfully!"
          echo "📊 Service status:"
          docker-compose ps
        port: 22
        timeout: 30s
        command_timeout: 15m
        proxy_port: 22
        proxy_timeout: 30s 
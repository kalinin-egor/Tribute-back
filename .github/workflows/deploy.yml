name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install dependencies
      run: go mod download
      
    - name: Run tests
      run: go test ./...
      
    - name: Deploy to VPS
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_IP }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        debug: true
        script: |
          set -e
          echo "🔐 SSH Authentication successful!"
          echo "Starting deployment process..."
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          
          # Set repository path
          REPO_PATH="/root/tribute/Tribute-back"
          echo "Using repository path: $REPO_PATH"
          
          # Navigate to repository directory
          if [ -d "$REPO_PATH" ]; then
            cd "$REPO_PATH"
            echo "Repository directory: $(pwd)"
          else
            echo "❌ Repository directory not found: $REPO_PATH"
            echo "Available directories in /root/:"
            ls -la /root/
            echo "Creating repository directory..."
            mkdir -p "$REPO_PATH"
            cd "$REPO_PATH"
          fi
          
          # Setup Git with HTTPS (more reliable than SSH for CI/CD)
          echo "📥 Setting up Git repository with HTTPS..."
          if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository_owner }}/Tribute-back.git .
          fi
          
          # Configure Git for HTTPS
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/${{ env.BRANCH_NAME }}
          
          # Setup Docker Compose
          echo "🐳 Setting up Docker Compose..."
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found in repository"
            exit 1
          fi
          
          # Stop existing containers if running
          echo "🛑 Stopping existing containers..."
          docker-compose down || true
          
          # Build and start containers
          echo "🔨 Building and starting containers..."
          docker-compose up -d --build
          
          # Wait for PostgreSQL to be ready
          echo "⏳ Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker-compose exec -T postgres pg_isready -U postgres -d tribute_db; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "⏳ Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          
          # Check if schema_migrations table exists and clean dirty state if needed
          echo "📊 Checking database state..."
          docker-compose exec -T postgres psql -U postgres -d tribute_db -c "
          DO \$\$
          BEGIN
            -- Create schema_migrations table if it doesn't exist
            IF NOT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'schema_migrations') THEN
              CREATE TABLE schema_migrations (version bigint PRIMARY KEY, dirty boolean);
            END IF;
            
            -- Clean any dirty state
            UPDATE schema_migrations SET dirty = false WHERE dirty = true;
            
            -- If no migrations recorded, start fresh
            IF NOT EXISTS (SELECT 1 FROM schema_migrations) THEN
              INSERT INTO schema_migrations (version, dirty) VALUES (0, false);
            END IF;
          END \$\$;
          " || echo "Database setup completed"
          
          # Run migrations with proper error handling
          echo "🔄 Running migrations..."
          docker-compose exec -T migrate migrate -path /migrations -database "postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable" up
          
          # Verify migration status
          echo "✅ Verifying migration status..."
          docker-compose exec -T postgres psql -U postgres -d tribute_db -c "SELECT version, dirty FROM schema_migrations;"
          
          echo "✅ Database migrations completed successfully!"
          
          # Check container status
          echo "📊 Container status:"
          docker-compose ps
          
          # Check logs
          echo "📋 Recent logs:"
          docker-compose logs --tail=20
          
          # Create systemd service for the binary (as backup)
          if [ ! -f "/etc/systemd/system/tribute-back.service" ]; then
            echo "🔧 Creating systemd service..."
            cat > /etc/systemd/system/tribute-back.service << 'EOF'
          [Unit]
          Description=Tribute Backend Service
          After=network.target
          
          [Service]
          Type=simple
          User=root
          WorkingDirectory=$REPO_PATH
          ExecStart=$REPO_PATH/tribute-back
          Restart=always
          RestartSec=5
          Environment=GIN_MODE=release
          
          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable tribute-back.service
          fi
          
          echo "🎉 Deployment completed successfully!"
          echo "📊 Service status:"
          docker-compose ps
        port: 22
        timeout: 60s
        command_timeout: 20m
        proxy_port: 22
        proxy_timeout: 30s 
 
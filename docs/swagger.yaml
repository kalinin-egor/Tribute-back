basePath: /api/v1
definitions:
  dto.AddBotRequest:
    properties:
      access_token:
        type: string
      bot-username:
        type: string
    type: object
  dto.AddBotResponse:
    properties:
      channel:
        $ref: '#/definitions/dto.ChannelDTO'
      message:
        type: string
    type: object
  dto.CallbackQuery:
    properties:
      data:
        type: string
      from:
        $ref: '#/definitions/dto.User'
      id:
        type: string
      message:
        $ref: '#/definitions/dto.Message'
    type: object
  dto.ChannelDTO:
    properties:
      channel_username:
        type: string
      id:
        type: string
    type: object
  dto.Chat:
    properties:
      id:
        type: integer
    type: object
  dto.CreateSubscribeRequest:
    properties:
      price:
        type: number
      user_id:
        type: integer
    type: object
  dto.DashboardResponse:
    properties:
      channels-and-groups:
        items:
          $ref: '#/definitions/dto.ChannelDTO'
        type: array
      earn:
        type: number
      is-sub-published:
        type: boolean
      is-verified:
        type: boolean
      payments-history:
        items:
          $ref: '#/definitions/dto.PaymentDTO'
        type: array
      subscriptions:
        items:
          $ref: '#/definitions/dto.SubDTO'
        type: array
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.Message:
    properties:
      chat:
        $ref: '#/definitions/dto.Chat'
      message_id:
        type: integer
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.OnboardResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.PaymentDTO:
    properties:
      created-date:
        type: string
      description:
        type: string
    type: object
  dto.PublishSubscriptionRequest:
    properties:
      access_token:
        type: string
      button-text:
        type: string
      description:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  dto.PublishSubscriptionResponse:
    properties:
      message:
        type: string
      subscription:
        $ref: '#/definitions/dto.SubDTO'
    type: object
  dto.SetUpPayoutsRequest:
    properties:
      access_token:
        type: string
      card-cvv:
        type: string
      card-date:
        type: string
      card-number:
        type: string
    type: object
  dto.StatusResponse:
    properties:
      status:
        type: string
    type: object
  dto.SubDTO:
    properties:
      description:
        type: string
      id:
        type: string
      price:
        type: number
      title:
        type: string
    type: object
  dto.TelegramUpdate:
    properties:
      callback_query:
        $ref: '#/definitions/dto.CallbackQuery'
      update_id:
        type: integer
    type: object
  dto.UploadVerifiedPassportRequest:
    properties:
      access_token:
        type: string
      user-passport:
        description: Assuming base64 encoded string
        type: string
      user-photo:
        description: Assuming base64 encoded string
        type: string
    type: object
  dto.User:
    properties:
      id:
        type: integer
    type: object
  dto.UserResponse:
    properties:
      earned:
        type: number
      id:
        type: integer
      is_onboarded:
        type: boolean
      is_sub_published:
        type: boolean
      is_verified:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@tribute.app
    name: API Support
    url: https://github.com/user/Tribute-back/issues
  description: This is the backend API for the Tribute application, which integrates
    with Telegram for user interaction and authentication. It uses Telegram's `initData`
    for secure, stateless authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Tribute Backend API
  version: "1.0"
paths:
  /add-bot:
    post:
      consumes:
      - application/json
      description: Adds a new Telegram channel for the authenticated user. This allows
        the system to associate a bot with the user's account.
      parameters:
      - description: The username of the bot/channel to add.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.AddBotRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created - The bot was added successfully.
          schema:
            $ref: '#/definitions/dto.AddBotResponse'
        "400":
          description: Bad Request - The request body is invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - e.g., bot with this username already
            exists.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Add a new Bot/Channel
      tags:
      - Tribute
  /check-verified-passport:
    post:
      consumes:
      - application/json
      description: '**PUBLIC ENDPOINT.** This endpoint is intended to be called by
        Telegram in response to an admin clicking a button in the verification chat.
        It should not be called directly by the frontend. It processes verification
        approvals and rejections.'
      parameters:
      - description: The callback query update sent by Telegram.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.TelegramUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Success - The callback was processed.
          schema:
            $ref: '#/definitions/dto.StatusResponse'
        "400":
          description: Bad Request - The payload from Telegram is malformed.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to process the callback data.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Telegram Verification Webhook
      tags:
      - Webhooks
  /create-subscribe:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user (the subscriber) to pay for and subscribe
        to another user (the creator). This action creates a payment record and updates
        the creator's earnings.
      parameters:
      - description: The ID of the user to subscribe to and the price.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSubscribeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created - The subscription was successful.
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request - The request body is invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - e.g., the creator has no subscription
            tier, or the price is incorrect.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Subscribe to an Author
      tags:
      - Tribute
  /dashboard:
    get:
      description: Retrieves all data for the main dashboard screen. The user is identified
        via the `initData` in the Authorization header. If the user does not exist
        in the database, empty data is returned, which is a normal flow indicating
        the user needs to complete onboarding via the `/onboard` endpoint.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved dashboard data (empty if user not onboarded).
          schema:
            $ref: '#/definitions/dto.DashboardResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - An unexpected error occurred.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Get Dashboard Data
      tags:
      - Tribute
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /onboard:
    put:
      description: Creates a user record if one doesn't exist, or updates an existing
        user to mark them as onboarded. This is the first endpoint a new user should
        call. It is idempotent.
      produces:
      - application/json
      responses:
        "200":
          description: Success - The user already existed and has been marked as onboarded.
          schema:
            $ref: '#/definitions/dto.OnboardResponse'
        "201":
          description: Created - A new user was created and marked as onboarded.
          schema:
            $ref: '#/definitions/dto.OnboardResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - An unexpected error occurred.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Onboard a User
      tags:
      - Tribute
  /publish-subscription:
    put:
      consumes:
      - application/json
      description: Allows an author to create or update their public subscription
        details (title, description, price). This is an idempotent operation. The
        user must have at least one channel added via `/add-bot` to use this.
      parameters:
      - description: The details of the subscription tier to publish.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.PublishSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success - The subscription was published or updated successfully.
          schema:
            $ref: '#/definitions/dto.PublishSubscriptionResponse'
        "400":
          description: Bad Request - The request body is invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - e.g., the user has no channels.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Publish or Update a Subscription Tier
      tags:
      - Tribute
  /set-up-payouts:
    post:
      consumes:
      - application/json
      description: Registers a user's bank card as a payout method. **IMPORTANT:**
        Card details are NOT stored in our database. They are forwarded directly to
        a secure payment gateway. The user must be verified to use this endpoint.
      parameters:
      - description: The user's card details.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.SetUpPayoutsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success - The payout method was registered successfully.
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request - The request body is invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired, or
            the user is not verified.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - The payment gateway returned an error.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Set Up Payout Method
      tags:
      - Tribute
  /upload-verified-passport:
    post:
      consumes:
      - application/json
      description: Uploads a user's photo and passport scan for manual verification.
        Both images must be provided as base64 encoded strings. The documents are
        sent to a private admin chat for review.
      parameters:
      - description: JSON object containing base64 encoded photo and passport.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UploadVerifiedPassportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success - The verification request was sent successfully.
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request - The request body is invalid or missing required
            fields.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized - The Authorization header is missing or invalid.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden - The provided initData is invalid or expired.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error - Failed to send documents to the verification
            service.
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - TgAuth: []
      summary: Upload Documents for Verification
      tags:
      - Tribute
schemes:
- http
securityDefinitions:
  TgAuth:
    description: |-
      **Authentication for Telegram Web Apps.** \
      Enter your token in the format: `TgAuth <initData>`. \
      The `<initData>` string is provided by the Telegram client when the web app is opened.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

basePath: /api/v1
definitions:
  models.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A clean, well-structured Golang REST API backend built with Gin framework,
    PostgreSQL database, Redis caching, and JWT authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Tribute Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request - validation error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid credentials
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, username, password, and personal
        information
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict - user already exists
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /users/:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of all users (admin only)
      parameters:
      - description: 'Number of users to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid parameters
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found - user not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found - user not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile information of the currently authenticated user
      parameters:
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not found - user not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

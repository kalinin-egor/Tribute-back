services:
  app:
    build: .
    container_name: tribute_app
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - tribute_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: tribute_postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: tribute_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tribute_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tribute_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - tribute_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:latest
    container_name: tribute_migrate
    command: >
      sh -c "
        echo 'Checking migration status...';
        STATUS=$$(migrate -path /migrations -database 'postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable' version 2>&1 || echo 'ERROR');
        if echo \"$$STATUS\" | grep -q 'dirty'; then
          echo 'Database is in dirty state. Fixing...';
          VERSION=$$(echo \"$$STATUS\" | grep -o '[0-9]\+' | head -1);
          echo \"Forcing version to $$VERSION...\";
          migrate -path /migrations -database 'postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable' force $$VERSION;
          echo 'Dirty state fixed!';
        fi;
        echo 'Running migrations...';
        migrate -path /migrations -database 'postgres://postgres:password@postgres:5432/tribute_db?sslmode=disable' up
      "
    volumes:
      - ./migrations:/migrations
    networks:
      - tribute_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
  redis_data:

networks:
  tribute_network:
    driver: bridge 